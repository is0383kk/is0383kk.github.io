<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>よしをのホームページ</title>
    <link>https://is0383kk.github.io/</link>
    <description>Recent content on よしをのホームページ</description>
    <image>
      <title>よしをのホームページ</title>
      <url>https://is0383kk.github.io/profile.jpg</url>
      <link>https://is0383kk.github.io/profile.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Nov 2023 20:07:27 +0900</lastBuildDate><atom:link href="https://is0383kk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分離レベルとそれに伴い発生する弊害について</title>
      <link>https://is0383kk.github.io/posts/2023/11/index20231120/</link>
      <pubDate>Mon, 20 Nov 2023 20:07:27 +0900</pubDate>
      
      <guid>https://is0383kk.github.io/posts/2023/11/index20231120/</guid>
      <description>はじめに 今回は分離レベルとそれに伴い発生する弊害のお話です。
本記事のゴール設定は以下の通りです。
 分離レベルは4種類あることを理解する。 分離レベルに伴い発生する3種類の弊害について理解する 実運用する上で分離レベルは「READ COMMITTED」以上が望ましいことを理解する。  ■ ACID特性とトランザクションの分離レベルの関係性 分離レベルの話の前に、トランザクション処理における4つの特性について押さえておきましょう。
ACID特性 ACID特性とはトランザクション処理に保持すべき４つの特性のことです。
   特性 要約      原子性 Atomicity  口座Aから口座Bに対し1万円送金する場合、口座Aと口座Bへの操作はすべて実行される(または、されない) COMMIT or ROLLBACK   一貫性 Consistency  口座Aから口座Bに対し1万円送金する場合、口座A、口座Bが負数になるような操作はできない　    独立性 Isolation  トランザクションは同時に実行しても、単独で実行しても同じ結果でなければならない    永続性 Durability  トランザクションが完了したら、障害が発生してもその操作結果は失われない    今回お話しする「トランザクションの分離レベル」とは、 独立性（Isolation） に関する概念のことです。
■ トランザクションの分離レベル 分離レベル 分離レベルには以下のものがあります。
   レベル 説明     分離レベル0 READ UNCOMMITTED - 未コミットレコードを他のトランザクションから参照できる   分離レベル1 READ COMMITTED - コミット済みレコードを他のトランザクションから参照できる   分離レベル2 REPEATABLE READ - トランザクション中は他のトランザクションでコミットされた更新を参照しない   分離レベル3 SERIALIZABLE - トランザクションを順序付けて処理する    データの一貫性が非常に重要な場合や、同時アクセスが多い状況ほど分離レベルは高いことが推奨されます。</description>
    </item>
    
    <item>
      <title>Hello World!!</title>
      <link>https://is0383kk.github.io/posts/2023/10/post20231010/</link>
      <pubDate>Tue, 10 Oct 2023 22:32:41 +0900</pubDate>
      
      <guid>https://is0383kk.github.io/posts/2023/10/post20231010/</guid>
      <description>■ 自己紹介 はじめまして、よしをと申します。
現在は国内のIT企業に勤めています。
詳しい経歴などは、プロフィールに書いてあります。
■ ブログのきっかけ ブログを始めたきっかけは自分のメモ書きをブログで管理したいと考えたためです。
元々学んだことや開発したものをWEB上に公開することが好きで、既にGitHubにいくつか制作物を公開しています。
公開している制作物の中にはいわゆるメモ書きも含まれています。
例えば、以下２つです。
 PCのセットアップ時のメモ Javaのフレームワークを学んだときのメモ  これらのメモ書きは今までREADMEで書いていました。。。
一方で、ブログ記事で管理することができれば、後で見返しやすく、READMEより読みやすい記事にできると考えました。
デザインもカスタマイズできるため、情報をわかりやすく整理し、より役に立つコンテンツを提供できると考えています。
■ さいごに はてなブログやQiitaに比べると覗いてもらえる機会は少ないと思います。
そのため、ほとんどが自分用の技術記事になると思います。
一方で、もし目に留まった記事でわからない点があったり、私個人に連絡したい等あれば、お気軽に連絡していただければと思います。</description>
    </item>
    
    <item>
      <title>プロフィール</title>
      <link>https://is0383kk.github.io/others/profile/</link>
      <pubDate>Mon, 09 Oct 2023 14:05:48 +0900</pubDate>
      
      <guid>https://is0383kk.github.io/others/profile/</guid>
      <description>Yoshiwo🐈     歳社会人エンジニア（年時点）
学生時代はロボット競技/機械学習（生成モデル）の研究に取り組む。
卒業後は日系IT企業でアプリケーション基盤の開発に携わる。
趣味で作ったものをGitHub上に公開している。 document.getElementById(&#39;currentYear&#39;).textContent = new Date().getFullYear(); document.getElementById(&#34;age&#34;).innerHTML = new Date().getFullYear() - 1998;  連絡先：is0383kk[at]gmail.com
 ■ スキル/経験 インフラ関連 Linux・AWSを使ったサーバ構築経験があります。
  技術 経験年数 内容     Linux 6年  機械学習用インフラ、アプリケーションインフラ構築に使用 Apache/Tomcat    AWS 2年  EC2インスタンス上へのアプリケーションサーバ構築に使用 EC2/AMI/RDS/Route53       アプリケーション関連 Spring Framework(boot)を使った開発経験があります。
  技術 経験年数 内容     Spring Framework 2年  アプリケーション開発に使用。</description>
    </item>
    
  </channel>
</rss>
